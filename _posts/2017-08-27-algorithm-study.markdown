---
layout: post
title: "algorithm study"
date: "2017-08-27 15:43:39 +0900"
categories: "Algorithm"
author: Soo
---
**알고리즘 공부**
===

**\<Hello Coding 그림으로 개념을 이해하는 알고리즘\>** 책을 요약 정리한 것입니다.

## Chapter 1. 알고리즘의 소개
---
#### 단순탐색 simple search
단순히 순서대로 추측을 하는 것

#### 이진탐색 binary search
<span style="color: #e87d7d">정렬된</span> 원소 리스트를 입력으로 받고, 리스트에 원하는 원소가 있으면 그 원소의 위치를 반환, 아니면 null 반환
<p><br /></p>
#### running time 그리고 빅오 표기법(Big O notation)
알고리즘의 시간은 어떻게 증가하는가로 측정함

* 단순 탐색: <span style="color: #7d7ee8">선형 시간(linear time)</span> 만큼 걸림, $O(n)$

* 이진 탐색: <span style="color: #7d7ee8">로그 시간(logarithmic time)</span> 만큼 걸림, $O(\log_{2}{n})$

**빅오 표기법(Big O notation)**: 연산 횟수를 나타냄

| 많이 사용하는 빅오(빠른순) | 설명 / 예시 |
|:--|:--|
| $O(1)$ | 고정 시간 |
| $O(\log{n})$ | 이진 탐색 |
| $O(n)$ | 단순 탐색 |
| $O(n*\log{n})$ | 퀵 정렬 |
| $O(n^2)$ | 선택 정렬 |
| $O(n!)$ | 외판원 문제 |

<p><br /></p>
<p><br /></p>

## Chapter 2. 선택 정렬
---
#### 배열과 연결 리스트

**리스트**: 원소를 메모리 아무 곳에다 저장해두고, 각 원소에는 목록의 다음 원소에 대한 주소가 저장되어있음, 특정 원소의 위치를 알려면 앞단의 원소의 위치를 알아야함, 그러나 메모리 공간을 예약 요청해서 저장할 필요가 없음

**배열**: 원소들을 메모리에 차례대로 저장함, 특정 원소의 위치를 알기 쉬움 대신 필요한 만큼 미리 일정한 메모리 공간을 요청함, 즉 원소를 추가할 일이 없으면 쓸데 없이 낭비하거나, 추가할 목록이 더 많이 커져 새로 다시 메모리 공간을 요청해야하는 단점이 있음.

**배열**과 **리스트**에서 읽기와 쓰기 연산을 하는 데 걸리는 시간:

|  | 배열 | 리스트 |
|:--:|:--:|:--:|
| 읽기 | $O(1)$ | $O(n)$ |
| 삽입 |  $O(n)$ | $O(1)$ |
| 삭제 |  $O(n)$ | $O(1)$ |

**자료에 접근하는 방식:**

* 임의 접근(random access): 임이의 원소에 접근 가능, ex) 배열
* 순차 접근(sequential access): 원소를 첫 번째 부터 하나씩 읽는 것, ex) 연결리스트

#### 선택 정렬
